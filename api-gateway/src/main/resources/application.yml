server:
  port: 8084

spring:
  application:
    name: api-gateway

  cloud:
    gateway:
      routes:
        - id: SB-USER
          uri: lb://SB-USER
          predicates:
            - Path=/users/**
#          filters:
#            - name: RequestRateLimiter
#              args:
#                redis-rate-limiter.replenishRate: 5 # Number of tokens added per second
#                redis-rate-limiter.burstCapacity: 10 # Max tokens in the bucket
#                key-resolver: {@ipKeyResolver} # Use IP address for rate limiting

        - id: SB-BLOG-BUSINESS
          uri: lb://SB-BLOG-BUSINESS
          predicates:
            - Path=/blogs/v1/business/**

        - id: SB-BLOG-INFO
          uri: lb://SB-BLOG-INFO
          predicates:
            - Path=/blogs/v1/info/**

        - id: SB-BLOG-COMMENTS
          uri: lb://SB-BLOG-COMMENTS
          predicates:
            - Path=/comments/**


eureka:
  instance:
    prefer-ip-address: true
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:8761/eureka



# Keycloak configuration for API Gateway
# Replace <host>, <realm>, <client-id>, and <client-secret> with your Keycloak values.
keycloak:
  issuer-uri: http://<keycloak-host>:8080/realms/<realm>
  audience: account

# Example client registration (if the gateway needs to act as an OAuth2 client):
# spring.security.oauth2.client.registration.gateway-client.client-id: <client-id>
# spring.security.oauth2.client.registration.gateway-client.client-secret: <client-secret>
# spring.security.oauth2.client.provider.keycloak.issuer-uri: http://<keycloak-host>:8080/realms/<realm>