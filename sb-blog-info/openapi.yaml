openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0

paths:
  /blogs/v1/info/:
    get:
      summary: Retrieve all blogs
      operationId: getBlogs
      responses:
        default:
          $ref: '#/components/responses/HttpErrorResponse'
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlogResponse'

  /blogs/v1/info/search:
    get:
      tags:
        - Users
      summary: Search blogs
      description: It will provide search capability on users.
      operationId: searchBlogs
      parameters:
        - name: query
          in: query
          description: Search user on basis on RSQL expression
          required: false
          explode: true
          schema:
            type: string
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
        - name: size
          in: query
          required: true
          schema:
            type: integer
        - name: page
          in: query
          required: true
          schema:
            type: integer
        - name: sortDir
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request was successful
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/HttpErrorResponse'

  /blogs/v1/info/user/{userId}:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
    get:
      summary: Retrieve a blog by user Id
      operationId: getBlogsByUser
      responses:
        default:
          $ref: '#/components/responses/HttpErrorResponse'
        '200':
          description: User found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlogResponse'
        '404':
          description: User not found

  /blogs/v1/{blogId}:
    parameters:
      - in: path
        name: blogId
        required: true
        schema:
          type: string
    get:
      summary: Retrieve a user by ID
      operationId: getBlogById
      responses:
        default:
          $ref: '#/components/responses/HttpErrorResponse'
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogResponse'
        '404':
          description: User not found

components:
  schemas:

    # Blog entity
    BlogResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        userId:
          type: string
        content:
          type: string
        categories:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        comments:
          type: array
          items:
            type: CommentRes

    CommentRes:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        blogId:
          type: string
        content:
          type: string

    APIError:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

  responses:
    HttpErrorResponse:
      description: The request has failed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIError'